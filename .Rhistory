future.opt <- list('gamlss2')
# foreach call
print('test')
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
image <- oro.nifti::readNIfTI(fname=image)
mask <- oro.nifti::readNIfTI(fname=mask)
voxeldata <- ts2matrix(image, mask)
# Coerce update on left hand g.formula for parallel fitting
g.fo <- update.formula(g.formula, 'Y ~ .')
# parallel settings
plan(cluster, workers = num_cores)
handlers(global = TRUE)
handlers("pbmcapply")
p <- with_progress(progressor(ncol(voxeldata)))
future.opt <- list('gamlss2')
# foreach call
print('test')
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
if (class(segmentation) == "character") {segmentation <- oro.nifti::readNIfTI(fname=segmentation)}
segmentation=NULL
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
Q
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
ts2matrix
image <- oro.nifti::readNIfTI(fname=image)
mask <- oro.nifti::readNIfTI(fname=mask)
#rm(image)
#rm(mask)
voxeldata <- images2matrix(image, mask)
image
mask
voxeldata <- ts2matrix(image, mask)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
#rm(image)
#rm(mask)
voxeldata2 <- images2matrix(image, mask)
object.size(voxeldata)
object.size(voxeldata2)
typeof(voxeldata2)
typeof(voxeldata)
voxeldata
voxeldata[1,1]
voxeldata2[1,1]
typeof(voxeldata2)
typeof(voxeldata)
ts2matrix
names(voxeldata2) <- names(voxeldata)
typeof(voxeldata)
typeof(voxeldata2)
as.list(voxeldata2)
mask <- oro.nifti::readNIfTI(fname=mask)
image <- oro.nifti::readNIfTI(fname=image)
voxeldata <- ts2matrix(image, mask)
typeof(voxeldata)
ts2matrix()
ts2matrix
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x + x1 | x + x1 | x | x "
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=SHASH,
train.data=covs)
one <- models[[1]]
one$coefficients
one$coefficients
one$coefficients$mu
?gamlss2
one$family
one$fake_formula
one$call
summary(one)
?gamlss2
coef(one, what = c("mu", "sigma", "nu", "tau"))
coef(one, what = c("mu"))
coefaAll(one)
coefAll(one)
coefsAll(one)
one
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x + x1 | x + x2 | x | x2 "
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x + x1 | x + x2 "
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x + x1 | x + x2 "
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
models[[1]]$coefficients
covs <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "~ x + x1 | x + x2 "
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
models[[1]]
models[[1]]$coefficients
models[[1]]$fitted.specials
models[[1]]$fitted.linear
models[[1]]$iterations
setwd("~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS")
df <- data.frame(read.csv(file = '~/PycharmProjects/NormativeModellingPsychosis/datasets/normod_df.csv'))
df
?gamlss2
df
f <- volume ~ ageY | s(sex) | s(scanner) | s(group)
## Estimate model.
b <- gamlss2(f, data = abdom, family = BCT)
## Estimate model.
b <- gamlss2(f, data = df, family = BCT)
f <- volume ~ ageY | s(sex) | s(scanner) | s(group)
## Estimate model.
b <- gamlss2(f, data = df, family = BCT)
f <- 'volume ~ ageY | s(sex) | s(scanner) | s(group)'
## Estimate model.
b <- gamlss2(f, data = df, family = BCT)
## Estimate model.
b <- gamlss2(f, data = df, family = SHASH)
f <- volume ~ ageY | s(sex) | s(scanner) | s(group)
## Estimate model.
b <- gamlss2(f, data = df, family = SHASH)
f <-
## Estimate model.
b <- gamlss2(volume ~ ageY | s(sex) | s(scanner) | s(group),
data = df,
family = SHASH)
f <-
## Estimate model.
b <- gamlss2(volume ~ ageY | s(sex),
data = df,
family = SHASH)
data("abdom", package = "gamlss.data")
## Specify the model Formula.
f <- y ~ s(x) | s(x) | s(x) | s(x)
## Estimate model.
b <- gamlss2(f, data = abdom, family = BCT)
b
b$coefficients
b$specials
f <-
## Estimate model.
b <- gamlss2(volume ~ pb(ageY),
data = df,
family = NO)
b$coefficients
b$fitted.linear
coefs(b)
coef(b)
plot(b, which = "effects")
plot(b, which = "resid")
wp(b)
wpplot(b)
?wp
wp(b)
f <-
## Estimate model.
b <- gamlss2(volume ~ pb(ageY) | sex,
data = df,
family = NO)
f <-
## Estimate model.
b <- gamlss2(volume ~ pb(ageY) | sex | group,
data = df,
family = NO)
f <-
## Estimate model.
b <- gamlss2(volume ~ pb(ageY) | sex | group,
data = df,
family = SHASH)
summary(b)
b$coefficients
b$nobs
as.list(b$coefficients)
as.list(b$coefficients)[1]
as.list(b$coefficients)[2]
as.list(b$coefficients)[3]
unlist(b$coefficients)
?matrixToImages
imagesToMatrix()
?imagesToMatrix
map_model_coefficients <- function(fittedobj, mask, filename){
if (class(fitted.gamlss) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_1st_mod_coefs <- names(first_mod_coefs)
N_1st_mod_coefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = numImages, ncol = numVoxels)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrix2image(coefs_mat)
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_1st_mod_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[i], fname)
}
}
models
map_model_coefficients(models, mask, '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap')
map_model_coefficients <- function(fittedobj, mask, filename){
if (class(fittedobj) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_1st_mod_coefs <- names(first_mod_coefs)
N_1st_mod_coefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = numImages, ncol = numVoxels)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrix2image(coefs_mat)
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_1st_mod_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[i], fname)
}
}
map_model_coefficients(models, mask, '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap')
map_model_coefficients <- function(fittedobj, mask, filename){
if (class(fittedobj) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_coefs <- names(first_mod_coefs)
ncoefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrix2image(coefs_mat)
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[i], fname)
}
}
map_model_coefficients(models, mask, '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap')
fittedobj <- models
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_coefs <- names(first_mod_coefs)
ncoefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
coefs_mat
dim(coefs_mat)
# convert mat to maps
coef_maps_images <- matrix2image(coefs_mat)
coefs_mat <- coefs_mat[1,]
# convert mat to maps
coef_maps_images <- matrix2image(coefs_mat)
?matrix2image
# convert mat to maps
coef_maps_images <- matrix2image(coefs_mat, mask)
# to be finished:
matrix2image <- function(matrix, mask){
if (missing(matix)) { stop("matrix is missing")}
if (missing(mask)) { stop("mask is missing")}
return(matrixToImages(matrix, antsImageRead(mask, 3)))
}
# convert mat to maps
coef_maps_images <- matrixToImages(coefs_mat, antsImageRead(mask, 3))
coefs_mat
coefs_mat[2,] <- coefs_mat[1,]
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
coefs_mat[2,] <- coefs_mat[1,]
coefs_mat[1,] <- coefs_mat[1,]
# convert mat to maps
coef_maps_images <- matrixToImages(coefs_mat, antsImageRead(mask, 3))
coef_maps_images
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[i], fname)
}
map_model_coefficients <- function(fittedobj, mask, filename){
if (class(fittedobj) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_coefs <- names(first_mod_coefs)
ncoefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrixToImages(coefs_mat, antsImageRead(mask, 3))
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[i], fname)
}
}
map_model_coefficients(models, mask, filename='/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap')
filename='/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap'
if (class(fittedobj) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_coefs <- names(first_mod_coefs)
ncoefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrixToImages(coefs_mat, antsImageRead(mask, 3))
coef_maps_images
name_coefs[i]
first_mod_coefs
names(first_mod_coefs)
name_coefs <- names(first_mod_coefs)
name_coefs
name_coefs[i]
name_coefs[[i]]
name_coefs[1]
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[[i]], fname)
}
map_model_coefficients <- function(fittedobj, mask, filename){
if (class(fittedobj) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_coefs <- names(first_mod_coefs)
ncoefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrixToImages(coefs_mat, antsImageRead(mask, 3))
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[[i]], fname)
}
}
map_model_coefficients(models, mask, filename='/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap')
coef_maps_images
name_coefs[i]
name_coefs
name_coefs <- names(first_mod_coefs)
name_coefs
first_mod_coefs
name_coefs <- names(first_mod_coefs)
name_coefs
name_coefs <- colnames(first_mod_coefs)
name_coefs
name_coefs <- names(first_mod_coefs)
map_model_coefficients <- function(fittedobj, mask, filename){
if (class(fittedobj) != "vbgamlss") { stop("fittedobj must be of class vbgamlss.")}
warning('Coefficients from special model terms cannot be map (e.g. pb(), s())')
nvox <- length(fittedobj)
first_mod_coefs <- unlist(fittedobj[[1]]$coefficients)
name_coefs <- names(first_mod_coefs)
ncoefs <- length(first_mod_coefs)
coefs_mat <- matrix(nrow = ncoefs, ncol = nvox)
for (i in 1:nvox) {
coefs_mat[,i] <- unlist(fittedobj[[i]]$coefficients)
}
# convert mat to maps
coef_maps_images <- matrixToImages(coefs_mat, antsImageRead(mask, 3))
# save files
for (i in length(coef_maps_images)) {
fname <- paste0(filename, '.', name_coefs[i],'.nii.gz')
antsImageWrite(coef_maps_images[[i]], fname)
}
}
map_model_coefficients(models, mask, filename='/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/pmap')
