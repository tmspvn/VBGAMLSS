g <- gamlss(
formula = Y ~ 1 + age + d1 + age:d1 + d2 + age:d2,
data=df
)
summary(g)
df_res_gamlss2 <- df
df_res_gamlss2$Y[YA] <- df_res_gamlss2$Y[YA] + g$mu.coefficients['d1']
df_res_gamlss2$Y[AG] <- df_res_gamlss2$Y[AG] + g$mu.coefficients['d2']
a <- ggplot(df, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1)  +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('No correction')
b <- ggplot(df_res, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected')
c <- ggplot(df_res_gamlss, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected gamlss')
d <- ggplot(df_res_gamlss2, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected gamlss2')
ggarrange(a, b, c, d)
library(rdmulti)
library(gamlss)
ri <- sample.int(100, 1)
#ri=85 # A < B < C
path_ <- paste0("/home/localadmin/urblauna/tpavan1/gamlss_input/md/data_", ri,".csv")
colnames(df)
df <- read.csv(path_)
WMFAmeans <- read.csv('/home/localadmin/urblauna/tpavan1/common_space/skel_means.csv', header=F)
#df$Y <- WMFAmeans$V1
df <- df[df$dataset != 'TRIO' & df$dataset != 'PRISMA' & df$dataset != 'HCPep',]
AG = df$dataset == 'HCPage'
YA = df$dataset == 'HCPya'
DV = df$dataset == 'HCPdev'
rescale_sigma = T
if (rescale_sigma){
print('Rescaling DV, YA sigmas to AG')
AGsd <- sd(df$Y[AG])
# rescale YA sigma to AG sigma:
x <- df$Y[YA]
df$Y[YA] <- ((x-mean(x)) / sd(x) * AGsd) + mean(x)
# rescale DV sigma to AG sigma:
x <- df$Y[DV]
DVrescaled <- ((x-mean(x)) / sd(x) * AGsd) + mean(x)
df$Y[DV] <- DVrescaled
}
# Cumulative multiple cutoffs
df$fuzzy <- 0
df$fuzzy[YA] <- 1
df$fuzzy[AG] <- 2
rd <- rdms(Y=df$Y,
X=df$age,
C=c(22,36.5),
plot=T,
fuzzy = df$fuzzy)
df_res <- df
df_res$Y[YA] <- df_res$Y[YA] - rd$Coefs[1]
df_res$Y[AG] <- df_res$Y[AG] - rd$Coefs[2]
# %%
df$d1 <- 0
df$d2 <- 0
df$d2[YA] <- 1
df$d1[AG] <- 1
g <- gamlss(
formula = Y ~ 1 + age + d1 + age:d1,
sigma.formula = ~1 + pb(age) + d1 + pb(age):d1,
data=df[AG | YA, ]
)
summary(g)
df_res_gamlss <- df
df_res_gamlss$Y[YA] <- df_res_gamlss$Y[YA] + g$mu.coefficients['d1']
g <- gamlss(
formula = Y ~ 1 + age + d2 + age:d2,
sigma.formula = ~1 + pb(age) + d2 + pb(age):d2,
data=df_res_gamlss[YA | DV, ]
)
df_res_gamlss$Y[AG] <- df_res_gamlss$Y[AG] + g$mu.coefficients['d2']
# %% gamlss 4
df$d1 <- 0
df$d2 <- 0
df$d2[YA] <- 1
df$d1[AG] <- 1
g <- gamlss(
formula = Y ~ 1 + poly(age,2) + d1 + poly(age,2):d1 + d2 + poly(age,2):d2,
data=df
)
summary(g)
df_res_gamlss2 <- df
df_res_gamlss2$Y[YA] <- df_res_gamlss2$Y[YA] + g$mu.coefficients['d1']
df_res_gamlss2$Y[AG] <- df_res_gamlss2$Y[AG] + g$mu.coefficients['d2']
a <- ggplot(df, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1)  +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('No correction')
b <- ggplot(df_res, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected')
c <- ggplot(df_res_gamlss, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected gamlss')
d <- ggplot(df_res_gamlss2, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected gamlss2')
ggarrange(a, b, c, d)
library(rdmulti)
library(gamlss)
ri <- sample.int(100, 1)
#ri=85 # A < B < C
path_ <- paste0("/home/localadmin/urblauna/tpavan1/gamlss_input/md/data_", ri,".csv")
colnames(df)
df <- read.csv(path_)
WMFAmeans <- read.csv('/home/localadmin/urblauna/tpavan1/common_space/skel_means.csv', header=F)
#df$Y <- WMFAmeans$V1
df <- df[df$dataset != 'TRIO' & df$dataset != 'PRISMA' & df$dataset != 'HCPep',]
AG = df$dataset == 'HCPage'
YA = df$dataset == 'HCPya'
DV = df$dataset == 'HCPdev'
rescale_sigma = T
if (rescale_sigma){
print('Rescaling DV, YA sigmas to AG')
AGsd <- sd(df$Y[AG])
# rescale YA sigma to AG sigma:
x <- df$Y[YA]
df$Y[YA] <- ((x-mean(x)) / sd(x) * AGsd) + mean(x)
# rescale DV sigma to AG sigma:
x <- df$Y[DV]
DVrescaled <- ((x-mean(x)) / sd(x) * AGsd) + mean(x)
df$Y[DV] <- DVrescaled
}
# Cumulative multiple cutoffs
df$fuzzy <- 0
df$fuzzy[YA] <- 1
df$fuzzy[AG] <- 2
rd <- rdms(Y=df$Y,
X=df$age,
C=c(22,36.5),
plot=T,
fuzzy = df$fuzzy)
df_res <- df
df_res$Y[YA] <- df_res$Y[YA] - rd$Coefs[1]
df_res$Y[AG] <- df_res$Y[AG] - rd$Coefs[2]
# %%
df$d1 <- 0
df$d2 <- 0
df$d2[YA] <- 1
df$d1[AG] <- 1
g <- gamlss(
formula = Y ~ 1 + age + d1 + age:d1,
sigma.formula = ~1 + pb(age) + d1 + pb(age):d1,
data=df[AG | YA, ]
)
summary(g)
df_res_gamlss <- df
df_res_gamlss$Y[YA] <- df_res_gamlss$Y[YA] + g$mu.coefficients['d1']
g <- gamlss(
formula = Y ~ 1 + age + d2 + age:d2,
sigma.formula = ~1 + pb(age) + d2 + pb(age):d2,
data=df_res_gamlss[YA | DV, ]
)
df_res_gamlss$Y[AG] <- df_res_gamlss$Y[AG] + g$mu.coefficients['d2']
# %% gamlss 4
df$d1 <- 0
df$d2 <- 0
df$d2[YA] <- 1
df$d1[AG] <- 1
g <- gamlss(
formula = Y ~ d1 + poly(age,2):d1 + d2 + poly(age,2):d2,
data=df
)
summary(g)
df_res_gamlss2 <- df
df_res_gamlss2$Y[YA] <- df_res_gamlss2$Y[YA] + g$mu.coefficients['d1']
df_res_gamlss2$Y[AG] <- df_res_gamlss2$Y[AG] + g$mu.coefficients['d2']
a <- ggplot(df, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1)  +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('No correction')
b <- ggplot(df_res, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected')
c <- ggplot(df_res_gamlss, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected gamlss')
d <- ggplot(df_res_gamlss2, aes(y=Y, x=age)) +
geom_point(aes(color=df$dataset), alpha = .1) +
#geom_smooth(se=T, method=lm, formula='y~poly(x,4)') +
ggtitle('Corrected gamlss2')
ggarrange(a, b, c, d)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
image <- oro.nifti::readNIfTI(fname=image)
mask <- oro.nifti::readNIfTI(fname=mask)
voxeldata2 <- ts2matrix(image, mask)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
#rm(image)
#rm(mask)
voxeldata <- images2matrix(image, mask)
voxeldata[1,1]
voxeldata2[1,1]
voxeldata2 - voxeldata
voxeldata2[1,1] - voxeldata[1,1]
voxeldata2[1,2] - voxeldata[1,2]
voxeldata2[100,2] - voxeldata[100,2]
voxeldata2[12,2] - voxeldata[102,2]
plot(voxeldata2, voxeldata)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
ncol(voxeldata)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
#rm(image)
#rm(mask)
voxeldata <- images2matrix(image, mask)
#if (!is.null(segmentation)){segmentation <- images2matrix(segmentation, mask)}
gc()
# Coerce update on left hand g.formula for parallel fitting
g.fo <- update.formula(g.formula, 'Y ~ .')
g.formula=fm1
g.family=NO
train.data=covs
# parallel settings
plan(cluster, workers = num_cores)
num_cores=10
handlers(global = TRUE)
handlers("pbmcapply")
p <- progressor(ncol(voxeldata))
future.opt <- list('gamlss2')
# foreach call
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
voxeldata
voxeldata[1000,100]
voxeldata[100,1000]
voxeldata[100,10000]
voxeldata[100,16400]
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
library(progressr)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
g.formula=fm1
g.family=NO
train.data=covs
if (class(g.formula) != "character") { stop("g.formula class must be character")}
if (is.null(num_cores)) {num_cores <- availableCores()}
voxeldata <- ts2matrix(image, mask)
#rm(image)
#rm(mask)
voxeldata <- images2matrix(image, mask)
# Coerce update on left hand g.formula for parallel fitting
g.fo <- update.formula(g.formula, 'Y ~ .')
# parallel settings
plan(cluster, workers = num_cores)
handlers(global = TRUE)
handlers("pbmcapply")
p <- progressor(ncol(voxeldata))
future.opt <- list('gamlss2')
# foreach call
print('test')
ncol(voxeldata)
if (is.null(num_cores)) {num_cores <- availableCores()}
num_cores
p <- with_progress(progressor(ncol(voxeldata)))
future.opt <- list('gamlss2')
# foreach call
print('test')
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
image <- oro.nifti::readNIfTI(fname=image)
mask <- oro.nifti::readNIfTI(fname=mask)
voxeldata <- ts2matrix(image, mask)
# Coerce update on left hand g.formula for parallel fitting
g.fo <- update.formula(g.formula, 'Y ~ .')
# parallel settings
plan(cluster, workers = num_cores)
handlers(global = TRUE)
handlers("pbmcapply")
p <- with_progress(progressor(ncol(voxeldata)))
future.opt <- list('gamlss2')
# foreach call
print('test')
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
if (class(segmentation) == "character") {segmentation <- oro.nifti::readNIfTI(fname=segmentation)}
segmentation=NULL
models <- foreach(vxlcol = seq_along(voxeldata),
.options.future = future.opt,
.combine=c
) %dofuture% {
# fit specific voxel
vxl_train_data <- train.data
vxl_train_data$Y <- voxeldata[,vxlcol]
# if multi tissue add
if (!is.null(segmentation)){
vxl_train_data$tissue <- segmentation[,vxlcol]}
# gamlss
g <- gamlss2::gamlss2(formula=g.fo,
data=vxl_train_data,
family=g.family,
light=TRUE,
trace=FALSE,
...)
g$control <- NULL
g$family <- g$family[1] # reset via gamlss2:::complete_family()
g$vxl <- vxlcol
p() # update progressbar
list(g)
}
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
Q
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
covs2 <- data.frame(x = runif(nsubj), x1 = runif(nsubj)*runif(nsubj), x2 = runif(nsubj))
fm1 <- "~ x | x1"
models <- vbgamlss(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
ts2matrix
image <- oro.nifti::readNIfTI(fname=image)
mask <- oro.nifti::readNIfTI(fname=mask)
#rm(image)
#rm(mask)
voxeldata <- images2matrix(image, mask)
image
mask
voxeldata <- ts2matrix(image, mask)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
#rm(image)
#rm(mask)
voxeldata2 <- images2matrix(image, mask)
object.size(voxeldata)
object.size(voxeldata2)
typeof(voxeldata2)
typeof(voxeldata)
voxeldata
voxeldata[1,1]
voxeldata2[1,1]
typeof(voxeldata2)
typeof(voxeldata)
ts2matrix
names(voxeldata2) <- names(voxeldata)
typeof(voxeldata)
typeof(voxeldata2)
as.list(voxeldata2)
mask <- oro.nifti::readNIfTI(fname=mask)
image <- oro.nifti::readNIfTI(fname=image)
voxeldata <- ts2matrix(image, mask)
typeof(voxeldata)
ts2matrix()
ts2matrix
setwd("~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS")
