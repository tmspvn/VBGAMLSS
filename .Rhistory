usethis::use_roxygen_md()
usethis::use_readme_rmd()
devtools::document()  # creates man/ and NAMESPACE from roxygen tags
usethis::use_testthat()
usethis::use_test("class")
# tests/testthat/test-class.R
test_that("vbgamlss returns correct class", {
skip_on_cran()
# use a tiny fake imageframe to avoid ANTsR in CI
imageframe <- as.data.frame(matrix(rnorm(20), nrow = 5))
covs <- data.frame(x = 1:5)
# mock a trivial fitter or guard if ANTsR unavailable
expect_true(TRUE)  # replace with lightweight checks you can run without ANTsR
})
devtools::check()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(VBGAMLSS)
vbgamlss
vbgamlss()
gc()
vbgamlss
library(VBGAMLSS)
vbgamlss()
??vbgamlss
?vbgamlss
predict(vbgamlss)
predict(vbgamlss())
devtools::install_github
devtools::install_github("tmspvn/VBGAMLSS", dependencies = TRUE)
library(VBGAMLSS)
vbgamlss()
vbgamlss
estimate_nchunks <- function(object, from_files=F, chunk_max_Mb=256) {
# compute chunk size of max 256 mb per job
if (! from_files){
memory_size_mb <- object.size(object) / (1024^2)
Nchunks <- ceiling(memory_size_mb / chunk_max_Mb)
} else {
memory_size_mb <- file.info(object)$size / (1024^2)
Nchunks <- ceiling(memory_size_mb / chunk_max_Mb)
}
return(Nchunks)
}
estimate_nchunks(rnorm(1))
print(estimate_nchunks(rnorm(1)))
print(estimate_nchunks(rnorm(999999999999999999999)))
print(estimate_nchunks(rnorm(999999999999)))
print(estimate_nchunks(rnorm(9990)))
print(estimate_nchunks(rnorm(99901)))
print(estimate_nchunks(rnorm(9990122)))
n <- 10000
big_mat <- matrix(runif(n * n), nrow = n, ncol = n)
estimate_nchunks(big_mat)
object.size(big_mat)
memory_size_mb <- file.info(big_mat)$size / (1024^2)
memory_size_mb <- object.size(big_mat)$size / (1024^2)
memory_size_mb <- object.size(big_mat) / (1024^2)
ceiling(memory_size_mb / chunk_max_Mb)
chunk_max_Mb=256
chunk_max_Mb=256
ceiling(memory_size_mb / chunk_max_Mb)
a <- ceiling(memory_size_mb / chunk_max_Mb)
a
a <- as.numeric(ceiling(memory_size_mb / chunk_max_Mb))
a
estimate_nchunks <- function(object, from_files=F, chunk_max_Mb=256) {
# compute chunk size of max 256 mb per job
if (! from_files){
memory_size_mb <- object.size(object) / (1024^2)
Nchunks <- ceiling(memory_size_mb / chunk_max_Mb)
} else {
memory_size_mb <- file.info(object)$size / (1024^2)
Nchunks <- ceiling(memory_size_mb / chunk_max_Mb)
}
return(as.numeric(Nchunks))
}
estimate_nchunks(big_mat)
estimate_nchunks(a)
warning('Subsampling is going to be deprecated', fill=T)
warning('Subsampling is going to be deprecated')
