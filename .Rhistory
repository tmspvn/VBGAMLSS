?check_range
??check_range
dfun
dfun <- familyobj$d
dfun(x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
bd = bd, log = TRUE)
?fdun
?dfun
gamlss2:::complete_family(get(fname))
familyobj$family
testGD <- function(nfitted, familyobj){
dfun <- paste("d", familyobj$family, sep = "")
pfun <- paste("p", familyobj$family, sep = "")
lpar <- length(familyobj$names)
if (is.null(nfitted$y))
stop("the response variables is missing in the newdata")
if (familyobj$family %in% .gamlss.bi.list) {
if (NCOL(nfitted$y) == 1) {
y1 <- nfitted$y
bd <- nfitted$bd
}
else {
bd <- nfitted$y[, 1] + nfitted$y[, 2]
y1 <- nfitted$y[, 1]
}
}
else {
y1 <- nfitted$y
}
if (lpar == 1) {
if (familyobj$family %in% .gamlss.bi.list) {
devi <- call(dfun, x = y1, mu = nfitted$mu, bd = bd,
log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, bd = bd)
}
else {
devi <- call(dfun, x = y1, mu = nfitted$mu, log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu)
}
}
else if (lpar == 2) {
if (familyobj$family %in% .gamlss.bi.list) {
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
bd = bd, log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$nmu, sigma = nfitted$sigma,
bd = bd)
}
else {
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, sigma = nfitted$sigma)
}
}
else if (lpar == 3) {
if (familyobj$family %in% .gamlss.bi.list) {
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, bd = bd, log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, bd = bd)
}
else {
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu)
}
}
else {
if (familyobj$family %in% .gamlss.bi.list) {
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, tau = nfitted$tau, bd = bd,
log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, tau = nfitted$tau, bd = bd)
}
else {
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, tau = nfitted$tau, log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, sigma = nfitted$sigma,
nu = nfitted$nu, tau = nfitted$tau)
}
}
Vresid <- qNO(eval(ures))
dev <- -2 * sum(eval(devi))
out <- list()
out <- list(TGD = dev, predictError = dev/dim(newdata)[1],
resid = Vresid)
return(out)
}
# test GD
plan(cluster)
GDs <- foreach(i=1:length(object)) %dofuture% {
vxlGD <- testGD(nfitted[[1]], familyobj)
vxlGD$vxl <- i
vxlGD
}
GDs
nfitted = nfitted[[2]]
dfun <- paste("d", familyobj$family, sep = "")
pfun <- paste("p", familyobj$family, sep = "")
lpar <- length(familyobj$names)
dfun
lpar
if (is.null(nfitted$y))
stop("the response variables is missing in the newdata")
if (familyobj$family %in% .gamlss.bi.list) {
if (NCOL(nfitted$y) == 1) {
y1 <- nfitted$y
bd <- nfitted$bd
}
else {
bd <- nfitted$y[, 1] + nfitted$y[, 2]
y1 <- nfitted$y[, 1]
}
}
else {
if (is.null(nfitted$y))
stop("the response variables is missing in the newdata")
nfitted$y
familyobj$family %in% .gamlss.bi.list
if (familyobj$family %in% .gamlss.bi.list) {
if (NCOL(nfitted$y) == 1) {
y1 <- nfitted$y
bd <- nfitted$bd
}
else {
bd <- nfitted$y[, 1] + nfitted$y[, 2]
y1 <- nfitted$y[, 1]
}
}
else {
y1 <- nfitted$y
y1
if (lpar == 1) {
if (familyobj$family %in% .gamlss.bi.list) {
devi <- call(dfun, x = y1, mu = nfitted$mu, bd = bd,
log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu, bd = bd)
}
else {
devi <- call(dfun, x = y1, mu = nfitted$mu, log = TRUE)
ures <- call(pfun, q = y1, mu = nfitted$mu)
}
}
else if (lpar == 2) {
lpar == 2
devi <- call(dfun, x = y1, mu = nfitted$mu, sigma = nfitted$sigma,
log = TRUE)
devi
ures <- call(pfun, q = y1, mu = nfitted$mu, sigma = nfitted$sigma)
ures
devi
Vresid <- qNO(eval(ures))
Vresid
dev <- -2 * sum(eval(devi))
devi
eval(devi)
if (is.null(newdata)){stop("newdata is not set")}
fname <- object$family[[1]]
fname <- as.character(object[[1]]$family)
familyobj <- gamlss2:::complete_family(get(fname))
nfitted <- quite(predict.vbgamlss(object, newdata = newdata,
ptype='parameter'))
nsub <- length(nfitted[[1]]$mu)
# add response to nfitted (from gamlss2.predict)
resp <- quite(predict.vbgamlss(object, newdata = newdata,
ptype='response'))
for(i in 1:length(object)){
nfitted[[i]]$y <- unlist(resp[[i]][1:nsub])
}
rm(resp)
# test GD
plan(cluster)
GDs <- foreach(i=1:length(object)) %dofuture% {
vxlGD <- testGD(nfitted[[1]], familyobj)
vxlGD$vxl <- i
vxlGD
}
class(GDs) <- "vbgamlss.predictions.GD"
GDs
GDs
GDs[[1]]
describe
quantiles
meanGD <- quantile(TGDs)
quantile
x = 1:20
vname=''test
vname='test'
eval(paste0('mean', vname,'<- mean(x)'))
call(paste0('mean', vname,'<- mean(x)'))
eval(get(paste0('mean', vname,'<- mean(x)')))
eval(paste0('mean', vname,'<- mean(x)'))
eval(parse(paste0('mean', vname,'<- mean(x)'))
meanGD <- mean(x)
eval(parse(paste0('mean', vname,'<- mean(x)')))
eval(parse(text=paste0('mean', vname,'<- mean(x)')))
meantest
c(a=10, b=11)
describe_stats <- function(x, vname) {
out <- c()
for (fn in c('mean', 'sd', 'quantile', 'min', 'max')) {
eval(parse(text=paste0(fn, vname,'<- ', fn,'(x)')))
eval(parse(text=paste0('out <- c(out,', fn, vname)))
}
return(out)
}
describe_stats(1:100, 'WW')
describe_stats <- function(x, vname) {
out <- c()
for (fn in c('mean', 'sd', 'quantile', 'min', 'max')) {
eval(parse(text=paste0(fn, vname,'<- ', fn,'(x)')))
eval(parse(text=paste0('out <- c(out,', fn, vname, ')')))
}
return(out)
}
describe_stats(1:100, 'WW')
a = describe_stats(1:100, 'WW')
a
a[1]
a[2]
a[3]
a = quantile(1:100)
a
a[1]
describe_stats <- function(x, vname) {
out <- c()
for (fn in c('mean', 'sd', 'quantile', 'min', 'max')) {
eval(parse(text=paste0(fn, vname,'<- ', fn,'(x)')))
eval(parse(text=paste0('out <- c(out,', fn, vname, ' = ', fn, vname, ')')))
}
return(out)
}
a = describe_stats(1:100, 'WW')
a
resids <- matrix(data=1:1000, nrow=100, ncol=100)
resids <- matrix(data=NA, nrow=nsub, ncol=nvxl)
resids
describe_stats(resids, 'RS')
models_load[[1]]
models_load[[1]]$df
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ pb(x)"
dfcv <- 1:258
dfcv[1:40] <- 1
dfcv[40:140] <- 2
dfcv[140:200] <- 1
dfcv[200:258] <- 2
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 10,
k.penalty=3)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 10,
k.penalty=3)
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 10,
k.penalty=3)
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ pb(x)"
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
nbrOfWorkers
nbrOfWorkers()
nbrOfWorkers(1)
nbrOfWorkers(2)
??nbrOfWorkers
nbrOfWorkers()
availableCores
availableCores()
# parallel settings
plan(cluster, workers = num_cores)
num_cores <- availableCores()
# parallel settings
plan(cluster, workers = num_cores)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ 1"
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 2,
k.penalty=3,
save_states=F)
dfcv <- 1:258
dfcv[1:40] <- 1
dfcv[40:140] <- 2
dfcv[140:200] <- 1
dfcv[200:258] <- 2
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 2,
k.penalty=3,
save_states=F)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ 1"
rbinom(0, 1, 0.5)
rbinom(0, 1, 0.5)
rbinom(0, 1, 0.5)
rbinom(0, 1, 0.5)
rbinom(0, 1, 0.5)
rbinom(0, 1, 0.5)
rbinom(0, 1, 0.5)
?rbinom
# test cv
dfcv <- rbinom(0, 258, 0.5)
dfcv
# test cv
dfcv <- rbinom(1:258, 258, 0.5)
dfcv
# test cv
dfcv <- rbinom(1:258-1:258, 258, 0.5)
dfcv
# test cv
dfcv <- rbinom(1, 258, 0.5)
dfcv
# test cv
dfcv <- rbinom(258, 1, 0.5)
dfcv
# test cv
dfcv <- rbinom(258, 2, 0.5)
dfcv
# test cv
dfcv <- rbinom(258, 1, 0.5)
dfcv
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 2,
k.penalty=3,
save_states=F)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ 1"
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 2,
k.penalty=3,
verbose=T)
# test cv
dfcv <- rbinom(258, 1, 0.5)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
out <- gamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 2,
k.penalty=3,
verbose=T)
plan(multisession)
plan(cluster)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ 1"
plan(cluster)
