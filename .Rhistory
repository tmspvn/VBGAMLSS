nu_tau_formulas <- dredge(m_,
evaluate = F,
# max length 4 terms + intercept
m.lim = c(1, 5),
# exclude interactions
subset = !`pb(ageY):scanner` && !`scanner:sex` && !`pb(volume):scanner` && !`pb(ageY):sex` && !`pb(ageY):pb(volume)` && !`pb(volume):tissue` && !`pb(ageY):tissue` && !`scanner:tissue` && !`sex:tissue`
)
m_ <- lm(Y ~ pb(ageY) * sex * pb(volume) * scanner * tissue, data = df_ready, na.action = na.pass)
nu_tau_formulas <- dredge(m_,
evaluate = F,
# max length 4 terms + intercept
m.lim = c(1, 5),
fixed =~ 1,
# exclude interactions
subset = !`pb(ageY):scanner` && !`scanner:sex` && !`pb(volume):scanner` && !`pb(ageY):sex` && !`pb(ageY):pb(volume)` && !`pb(volume):tissue` && !`pb(ageY):tissue` && !`scanner:tissue` && !`sex:tissue`
)
m_ <- lm(Y ~ pb(ageY) * sex * pb(volume) * scanner * tissue, data = df_ready, na.action = na.pass)
nu_tau_formulas <- dredge(m_,
evaluate = F,
# max length 4 terms + intercept
m.lim = c(1, 5),
fixed =~ pb(ageY) + sex + pb(volume) + scanner + tissue,
# exclude interactions
subset = !`pb(ageY):scanner` && !`scanner:sex` && !`pb(volume):scanner` && !`pb(ageY):sex` && !`pb(ageY):pb(volume)` && !`pb(volume):tissue` && !`pb(ageY):tissue` && !`scanner:tissue` && !`sex:tissue`
)
##### NU/TAU formulas
m_ <- lm(Y ~ pb(ageY) + sex + pb(volume) + scanner + tissue, data = df_ready, na.action = na.pass)
m_ <- lm(Y ~ pb(ageY) + sex + pb(volume) + scanner + tissue, data = df_ready, na.action = na.pass)
nu_tau_formulas <- dredge(m_,
evaluate = F,
# max length 4 terms + intercept
m.lim = c(1, 5),
# exclude interactions
subset = !`pb(ageY):scanner` && !`scanner:sex` && !`pb(volume):scanner` && !`pb(ageY):sex` && !`pb(ageY):pb(volume)` && !`pb(volume):tissue` && !`pb(ageY):tissue` && !`scanner:tissue` && !`sex:tissue`
)
m_ <- lm(Y ~ pb(ageY) + sex + pb(volume) + scanner + tissue, data = df_ready, na.action = na.pass)
nu_tau_formulas <- dredge(m_,
evaluate = F,
# max length 4 terms + intercept
m.lim = c(1, 5),
# exclude interactions
#subset = !`pb(ageY):scanner` && !`scanner:sex` && !`pb(volume):scanner` && !`pb(ageY):sex` && !`pb(ageY):pb(volume)` && !`pb(volume):tissue` && !`pb(ageY):tissue` && !`scanner:tissue` && !`sex:tissue`
)
nu_tau_formulas <- null.left.formula(nu_tau_formulas)
nu_tau_formulas
sigma_formulas
nu_tau_formulas
# fixed
m_ <- lm(Y ~ pb(ageY) * sex * pb(volume) * scanner * tissue, data = df_ready, na.action = na.pass)
mu_formulas <- dredge(m_,
evaluate = F,
# no not reduce further than:
fixed =~ pb(ageY) + sex + scanner + tissue,
# max length 7 terms + intercept
m.lim = c(4, 6)
)
mu_formulas <- get.formula(mu_formulas)
##### SIGMA formulas
m_ <- lm(Y ~ pb(ageY) * sex * pb(volume) * scanner * tissue, data = df_ready, na.action = na.pass)
sigma_formulas <- dredge(m_,
evaluate = F,
# no reduce further than:
fixed =~ pb(ageY) + sex + scanner + tissue,
# max length 6 terms + intercept
m.lim = c(4, 6)
)
sigma_formulas <- null.left.formula(sigma_formulas)
m_ <- lm(Y ~ pb(ageY) + sex + pb(volume) + scanner + tissue, data = df_ready, na.action = na.pass)
nu_tau_formulas <- dredge(m_,
evaluate = F,
# max length 4 terms + intercept
m.lim = c(1, 3),
# exclude interactions
#subset = !`pb(ageY):scanner` && !`scanner:sex` && !`pb(volume):scanner` && !`pb(ageY):sex` && !`pb(ageY):pb(volume)` && !`pb(volume):tissue` && !`pb(ageY):tissue` && !`scanner:tissue` && !`sex:tissue`
)
nu_tau_formulas <- null.left.formula(nu_tau_formulas)
###
print(length(mu_formulas)) # 22
print(length(sigma_formulas)) # 22
print(length(nu_tau_formulas) * 2) # 15
print(length(mu_formulas) + length(sigma_formulas) + length(nu_tau_formulas) * 2)
write.table(as.character(mu_formulas), col.names = F, row.names = F,
file = "~/PycharmProjects/NormativeModellingPsychosis/gamlss/R/NM_Mu_R_formulas.csv")
write.table(as.character(sigma_formulas), col.names = F, row.names = F,
file = "~/PycharmProjects/NormativeModellingPsychosis/gamlss/R/NM_Sigma_R_formulas.csv")
write.table(as.character(nu_tau_formulas), col.names = F, row.names = F,
file = "~/PycharmProjects/NormativeModellingPsychosis/gamlss/R/NM_NuTau_R_formulas.csv")
library(ggplot2)
library(plyr)
library(ggpubr)
library(cowplot)
library(patchwork)
library(MASS)
library(glmtoolbox)
library(patchwork)
library(ggcorrplot)
library(corrplot)
library(latex2exp)
library(mpmi)
library(scales)
library(robustbase)
source("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/paper_plots.R")
library(umap)
library(reticulate)
library(stats)
library(cluster)
library(NbClust)
library(GGally)
#### Functions
coolwarm <- c("#0000ff","#8080ff",  "#000000",  "#ff8080",  "#ff0000")
CW <- c("#bbbbbb", "#5596e6", "#cf2c27")
CW7 <- c("#2c4a8f","#5596e6","#8bc0ff","#bbbbbb","#f0726e","#cf2c27","#8e0a04")
CW4 <- c("#2c4a8f", "#8bc0ff", "#cf2c27", "#8e0a04")
cW5cr <- c("#461351", "#8e0a04", "#cf2c27", "#f0726e", "#ffb6b0")
signif.num <- function(x) {as.numeric(symnum(x, corr = FALSE, na = FALSE, legend = FALSE,
cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),
symbols = c(4, 3, 2, 1, NA)))}
signif.star <- function(x) {symnum(x, corr = FALSE, na = FALSE, legend = FALSE,
cutpoints = c(0, 1e-04, 0.001, 0.01, 0.05, 1),
symbols = c("****", "***", "**", "*", " "))}
p.star <- function(x) {paste(round(x, 2), signif.star(x), sep='')}
ep.star <- function(x) {paste(formatC(x, format = "e", digits = 1), signif.star(x), sep='')}
control_by <- function(fit_data_res, vars="ageM + sex"){
for (ic in seq_along(skeletons)){
coi <- skeletons[ic]
dt <- fit_data_res
colnames(dt)[colnames(dt)==coi] <-'coi'
# fit model
print(ic)
formul <- paste("coi ~", vars)
lm_ <- lm(formul, data = dt, na.action=na.exclude)
fit_data_res[, coi] <- residuals(lm_)
}
return(fit_data_res)
}
control_fromHC_by <- function(fit_data_res, vars="poly(ageM,2) + sex"){
for (ic in seq_along(skeletons)){
coi <- skeletons[ic]
dt <- fit_data_res
colnames(dt)[colnames(dt)==coi] <-'coi'
# fit model
print(ic)
formul <- paste("coi ~", vars)
lm_ <- lm(formul, data = dt[dt$group=='HC-O' | dt$group=='HC-Y',], na.action=na.exclude)
fit_data_res[, coi] <- (dt$coi - predict(lm_, dt)) / sigma(lm_)
}
return(fit_data_res)
}
control_scales_by <- function(fit_data_res, vars="ageM + sex"){
panss_sum <- c('PANSSPOS','PANSSNEG','PANSSGEN','PANSSTOTAL','PANSSWALLWORKPOSITIVE','PANSSWALLWORKNEGATIVE','PANSSWALLWORKDISORGANIZED',
'PANSSWALLWORKEXCITED','PANSSWALLWORKDEPRESSED')
other = c('GAF', 'SOFAS','YMRSTOTAL', 'MADRSTOTAL')
for (ic in seq_along(c(panss_sum, other))){
coi <- c(panss_sum, other)[ic]
dt <- fit_data_res
colnames(dt)[colnames(dt)==coi] <-'coi'
# fit model
print(ic)
formul <- paste("coi ~", vars)
lm_ <- lm(formul, data = dt, na.action=na.exclude)
print(summary(lm_))
fit_data_res[, coi] <- residuals(lm_)
}
return(fit_data_res)
}
wrap_ggcorrplot <- function(data, thr=T, usecase="complete.obs", usemethod='pearson'){
corr <- round(cor(data, use = usecase, method=usemethod),2)
if (thr == T){
p.mat <- cor_pmat(data)
p.mat[upper.tri(p.mat, diag = FALSE)] = p.adjust(p.mat[upper.tri(p.mat, diag = FALSE)],
method = 'fdr')
thr = p.mat
} else {
thr = FALSE
}
ecm <-  ggcorrplot(corr,
method = "square",
type = "full",
ggtheme = ggplot2::theme_minimal,
title = "",
show.legend = TRUE,
legend.title = "Corr",
show.diag = TRUE,
colors = c("blue", "white", "red"),
outline.color = "gray",
hc.order = FALSE,
hc.method = "complete",
p.mat = thr,
lab = T,
lab_col = "black",
lab_size = 2,
sig.level = 0.05,
insig = "blank", #c("pch", "blank"),
pch = 4,
pch.col = "black",
pch.cex = 5,
tl.cex = 7,
tl.col = "black",
tl.srt = 45,
digits = 2,
as.is = F
)
return(ecm)
}
wrap_ggpair <- function(data, clust){
data <- data[clust !=0, ]
clust <- clust[clust !=0]
GGally::ggpairs(data, mapping = aes(color = clust))
}
compute_joint_pmat <- function(data1, data2, x, y, mcc='fdr'){
p.mat1 <- cor_pmat(data1)[,x][y,]
p.mat2 <- cor_pmat(data2)[,x][y,]
p.mat1.corr <- p.mat1
p.mat2.corr <- p.mat2
# vect d1
v1 = c(p.mat1)
#vect d2
v2 = c(p.mat2)
#combine
V = c(v1, v2)
#corrcet
Vcorr = p.adjust(V, method = mcc)
# recon pmat
p.mat1.corr[] <- matrix(Vcorr[0:length(v1)], nrow = dim(p.mat1)[1], ncol=dim(p.mat1)[2], byrow = FALSE)
p.mat2.corr[] <- matrix(Vcorr[(length(v1)+1) : (length(v1)+length(v2))], nrow = dim(p.mat2)[1], ncol=dim(p.mat2)[2], byrow = FALSE)
return(list(p.mat1.corr, p.mat2.corr))
}
## import data
df <- data.frame(read.csv(file = '/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/longitudinal/resid_df_skeletons_harmonized_noimputation_allscales_deltamri-test.csv'))
jhu <- read.csv(file = '/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/jhu_labels_for_R.csv')
## remove ARMS
df <- subset(df, group != 'ARMS') #
df$clin <- df$group != 'CTRL'
#### diagnostic categories ####
df_diagnosis <- data.frame(read.csv(file = '/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/longitudinal/diagnosis_only.csv'))
df <- merge(df, df_diagnosis, by = c('sub', 'ses'), all.x = TRUE)
df$affective <- F
affective_diagnosis <- c("Bipolar disorder with psychotic features", "Depressive disorder with psychotic features",
"Bipolar disorder", "Unspecified psychotic disorder; Depressive disorder",
"Cannabis-induced psychotic disorder")
affective_diagnosis <- c("Schizoaffective disorder")
df$affective[df$diagnosis %in% affective_diagnosis] <- T
df$schizoaffective <- df$diagnosis == 'Schizoaffective disorder'
## subset, remove NA
fit_data <- df[df$cross_sectional=='True',]
#keep only skeletons
roi <- jhu$long_corrected[30]
fit_data_sk <- fit_data %>% subset(label == roi)
fit_data_sk$ageM <- fit_data_sk$ageM / 12
fit_data_sk = fit_data_sk %>% mutate_if(is.character, as.factor)
######### make sub control groups
min_ep <- min(fit_data_sk$ageM[fit_data_sk$group == 'EP'])
max_ep <- max(fit_data_sk$ageM[fit_data_sk$group == 'EP'])
young_ctrl <- fit_data_sk$ageM <= max_ep & fit_data_sk$ageM >= min_ep
min_sz <- min(fit_data_sk$ageM[fit_data_sk$group == 'SCHZ'])
max_sz <- max(fit_data_sk$ageM[fit_data_sk$group == 'SCHZ'])
old_ctrl <-  fit_data_sk$ageM <= max_sz & fit_data_sk$ageM >= min_sz
# new groups by duplicating rows
fit_data_sk$group_old = fit_data_sk$group
fit_data_sk$group2 <- as.character(fit_data_sk$group)
fit_data_sk$group2[young_ctrl & fit_data_sk$group == 'CTRL'] <- 'CTRL-Y'
ctrl_to_duplicate <- fit_data_sk$group2 == 'CTRL-Y' & old_ctrl
fit_data_sk$group2[old_ctrl & fit_data_sk$group == 'CTRL'] <- 'CTRL-O'
dims <- dim(fit_data_sk)
fit_data_sk <- rbind(fit_data_sk, fit_data_sk[ctrl_to_duplicate,])
# transform only duplicates in control young
fit_data_sk[seq(dims[1]+1, dim(fit_data_sk)[1]), 'group2'] <- 'CTRL-Y'
fit_data_sk$group <- as.factor(fit_data_sk$group2)
levels(fit_data_sk$group) <- c("HC-O", "HC-Y", "EP","SZ")
### drop extreame subject
fit_data_sk <- fit_data_sk[fit_data_sk$sub !='L478', ]
library("ComplexHeatmap")
library(circlize)
library(devtools)
library(glue)
set.seed(7)
source("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/paper_plots.R")
WW <- c('PANSSWALLWORKPOSITIVE','PANSSWALLWORKNEGATIVE','PANSSWALLWORKDISORGANIZED',
'PANSSWALLWORKEXCITED','PANSSWALLWORKDEPRESSED')
# 'YMRSTOTAL',
other = c('GAF', 'MADRSTOTAL')
skeletons <- c("skeleton_rd","skeleton_md","skeleton_ad","skeleton_fa",
"skeleton_rk","skeleton_mk","skeleton_ak","skeleton_f",
"skeleton_da","skeleton_depar","skeleton_deperp","skeleton_c2")
voi = c(skeletons, WW, other)
yvoi = c(WW, other)
# test -----
#subset_pheatmaps(fit_data_cc[fit_data_cc$group == 'EP', voi], yvar=yvoi, thr=F,
#                 xvar=skeletons)
#subset_pheatmaps(fit_data_cc[fit_data_cc$group == 'SZ', voi], yvar=yvoi, thr=F,
#                 xvar=skeletons)
### build corr matrix to plot
THR=F
CORRECT=F
thrv=0.1
have.mood=F
only.madrs=T
exclude_affective_psy=F
only_diagnosis_sz=F
exclude_long_delay=T
compute_joint_pmat_bool=T
if (CORRECT){
fit_data_cc <- control_fromHC_by(fit_data_sk, vars='poly(ageM, 2) + sex')
fit_data_cc <- fit_data_cc[abs(fit_data_cc$delta_MRI_scales_months) < 6, ]
} else {
fit_data_cc <- fit_data_sk
}
if (exclude_long_delay){
fit_data_cc <- fit_data_cc[abs(fit_data_cc$delta_MRI_scales_months) <= 1.5, ] # 45 days
}
if (exclude_affective_psy){
fit_data_cc <- fit_data_cc[fit_data_cc$affective == F,]
}
if (only_diagnosis_sz){
fit_data_cc <- fit_data_cc[fit_data_cc$diagnosis == 'Schizophrenia',]
}
# EP
corr_ep <- round(cor(fit_data_cc[fit_data_cc$group == 'EP', voi], use = "complete.obs", method='pearson'),2)
if (THR){corr_ep[corr_ep < thrv & corr_ep > -thrv] <- 0}
corr_ep_dim = corr_ep[,skeletons][c(WW, other),]
#pmats
p_mat_ep_dim <- compute_pmat(fit_data_cc[fit_data_cc$group == 'EP', voi])[,skeletons][c(WW, other),]
# SZ
corr_sz <- round(cor(fit_data_cc[fit_data_cc$group == 'SZ', voi], use = "complete.obs", method='pearson'),2)
if (THR){corr_sz[corr_sz < thrv & corr_sz > -thrv] <- 0}
corr_sz_dim = corr_sz[,skeletons][c(WW, other),]
#pmats
p_mat_sz_dim <- compute_pmat(fit_data_cc[fit_data_cc$group == 'SZ', voi])[,skeletons][c(WW, other),]
# compute joint pmat
if (compute_joint_pmat_bool){
lst_pmat = compute_joint_pmat(fit_data_cc[fit_data_cc$group == 'EP', voi],
fit_data_cc[fit_data_cc$group == 'SZ', voi], x=skeletons, y=c(WW, other), mcc='fdr')
p_mat_ep_dim = lst_pmat[[1]][,skeletons][c(WW, other),]
p_mat_sz_dim = lst_pmat[[2]][,skeletons][c(WW, other),]
}
# both
corr_sz <- round(cor(fit_data_cc[fit_data_cc$group == 'SZ', voi], use = "complete.obs", method='pearson'),2)
####### function #########
wrap_pheatmap <- function(corr,
new_ylab=NULL, new_xlab=NULL,
mk_big=1, lgnd=T,
HCm='complete',
cc=F, rc=F,
ctr=NULL, ctc=NULL,
add_pmat=F, pmat=NA,
row_title=NULL,
col_title=NULL
){
#colormap
col_fun_prop = colorRamp2(c(-0.5, -0.25,  0.0,  0.25, 0.5),
c("#3b4cc0", "#8cb0fe", "#eaeaf2", "#f4997a", "#b30425"))
#c("darkblue", "#5596e6", "#eeeeee", "#cf2c27", "darkred")) # old colormap
# annotation row
ann_row=NA
if (rc){
tree_row = hclust(dist(corr, method = "euclidean"), method = HCm)
cl = cutree(tree_row, ctr)
ann_row = data.frame(cl)
colnames(ann_row) = paste('Cl.', ctr)
}
# annotation col
ann_col=NA
if (cc){
tree_row = hclust(dist(t(corr), method = "euclidean"), method = HCm)
cl = cutree(tree_row, ctc)
ann_col = data.frame(cl)
colnames(ann_col) = paste('Cl.', ctc)
}
# function to add pvalue
if (add_pmat){
pmat_f <- function(j, i, x, y, width, height, fill) {
if(pmat[i, j] < 0.05)
grid.text(sprintf("🞱"), x, y,
just=c('centre', 'centre'),
gp = gpar(fontsize = 10*mk_big*0.9,
col="white",
fontface="bold"
))
}
} else{pmat_f=NULL}
#### make heatmap
hm <- ComplexHeatmap::pheatmap(corr,
col=col_fun_prop,
cellwidth=10*mk_big,
cellheight=10*mk_big,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method=HCm,
row_labels=new_ylab,
column_labels=new_xlab,
legend=lgnd,
display_numbers=F,
cutree_rows=ctr,
cutree_cols=ctc,
annotation_row=ann_row,
annotation_col=ann_col,
cell_fun=pmat_f,
heatmap_legend_param = list(title = "Pearson-r",
col_fun = col_fun_prop,
at = c(-0.6, -0.3,  0.0,  0.3, 0.6),
labels = c("-.6","-.3","0",".3",".6"),
by_row = T
)
)
hm@row_title=row_title
hm@column_title=col_title
return(hm)
}
####### end function #########
sc = 1.7
# dim EP
ph1 <- wrap_pheatmap(corr_ep_dim,
new_xlab=new_dmri_lab(),
new_ylab=translpsy_WWdim_lab(mood=have.mood, only.madrs),
lgnd=F, mk_big=sc,
ctr=2, ctc=2,
add_pmat=T, pmat=p_mat_ep_dim,
row_title=glue('Dimensions'),
HCm='complete'
)
# dim SZ
ph2 <- wrap_pheatmap(corr_sz_dim,
new_xlab=new_dmri_lab(),
new_ylab=translpsy_WWdim_lab(mood=have.mood, only.madrs),
lgnd=T, mk_big=sc,
ctr=3, ctc=2,
add_pmat=T, pmat=p_mat_sz_dim,
row_title = '',
HCm='complete'
)
ph_list_ep <- ph1
ph_list_sz <- ph2
# add pvalues legend
lgd_sig = Legend(pch = "🞱", type = "points", labels = "FDR<0.05", by_row = T)
ph_list_sz <- draw(ph_list_sz, heatmap_legend_list=list(lgd_sig))
png("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/1200dpi/HIER_CLUST_CORRPLOR_TranslPsych.tif",
units="mm",
width = 285, #295
height = 85, #90
res=300,
type="cairo")
wrap_plots(list(grid.grabExpr(draw(ph_list_ep)),
grid.grabExpr(draw(ph_list_sz))),
ncol = 2) & plot_annotation(tag_levels = list(c("A. EP", "B. SZ")))
dev.off()
png("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/1200dpi/HIER_CLUST_CORRPLOR_TranslPsych.tif",
units="mm",
width = 265, #295
height = 75, #90
res=300,
type="cairo")
wrap_plots(list(grid.grabExpr(draw(ph_list_ep)),
grid.grabExpr(draw(ph_list_sz))),
ncol = 2) & plot_annotation(tag_levels = list(c("A. EP", "B. SZ")))
dev.off()
ph_list_ep <- ph1
ph_list_sz <- ph2
# add pvalues legend
#lgd_sig = Legend(pch = "🞱", type = "points", labels = "FDR<0.05", by_row = T)
#ph_list_sz <- draw(ph_list_sz, heatmap_legend_list=list(lgd_sig))
png("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/1200dpi/HIER_CLUST_CORRPLOR_TranslPsych.tif",
units="mm",
width = 275, #295
height = 75, #90
res=300,
type="cairo")
wrap_plots(list(grid.grabExpr(draw(ph_list_ep)),
grid.grabExpr(draw(ph_list_sz))),
ncol = 2) & plot_annotation(tag_levels = list(c("A. EP", "B. SZ")))
dev.off()
png("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/1200dpi/HIER_CLUST_CORRPLOR_TranslPsych.tif",
units="mm",
width = 255, #295
height = 75, #90
res=300,
type="cairo")
wrap_plots(list(grid.grabExpr(draw(ph_list_ep)),
grid.grabExpr(draw(ph_list_sz))),
ncol = 2) & plot_annotation(tag_levels = list(c("A. EP", "B. SZ")))
dev.off()
#lgd_sig = Legend(pch = "🞱", type = "points", labels = "FDR<0.05", by_row = T)
#ph_list_sz <- draw(ph_list_sz, heatmap_legend_list=list(lgd_sig))
png("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/1200dpi/HIER_CLUST_CORRPLOR_TranslPsych.tif",
units="mm",
width = 260, #295
height = 75, #90
res=300,
type="cairo")
wrap_plots(list(grid.grabExpr(draw(ph_list_ep)),
grid.grabExpr(draw(ph_list_sz))),
ncol = 2) & plot_annotation(tag_levels = list(c("A. EP", "B. SZ")))
dev.off()
#ph_list_sz <- draw(ph_list_sz, heatmap_legend_list=list(lgd_sig))
png("/home/localadmin/PycharmProjects/LausannePsychosisAnalysis/R_scripts/paper_plots_scripts/1200dpi/HIER_CLUST_CORRPLOR_TranslPsych.tif",
units="mm",
width = 263, #295
height = 75, #90
res=300,
type="cairo")
wrap_plots(list(grid.grabExpr(draw(ph_list_ep)),
grid.grabExpr(draw(ph_list_sz))),
ncol = 2) & plot_annotation(tag_levels = list(c("A. EP", "B. SZ")))
dev.off()
gc()
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/VBGAMLSS.R')
models <- load_model('/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vbgamlss.model/vbgamlss')
predictions <- predict.vbgamlss(models, newdata = NULL)
library(ANTsR)
install.packages('ANTsR')
devtools::install_github('ANTsX/ANTsR')
setwd("~/urblauna/tpavan1/containers/R_scripts_model_selection")
setwd("~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS")
