# test cv
dfcv <- rbinom(258, 1, 0.5)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
options(future.globals.maxSize=2000*1024^2)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
options(future.globals.maxSize=2000*1024^2)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
subsample = 0.5
subsample.type='regular'
get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
subsample
get_subsample_indices(dim=sum(antsImageRead(mask)>0),
sampling_type=subsample.type,
factor=subsample)
#' @export
get_subsample_indices <- function(dim, sampling_type, factor) {
if (!is.numeric(factor) && factor>0 && factor<=1) {
stop("Error: factor (or subsample) must be numeric between (0, 1]")
}
if (!sampling_type %in% c("random", "regular")) {
stop("Sampling type must be either 'random' or 'regular'.")
}
# Calculate the number of elements to sample
n <- ceiling(dim * factor)
cat(paste0('Subsampling by a factor of ', factor, '(', n,'vxl)',
', with strategy: ', sampling_type,))
if (sampling_type == "regular") {
# Calculate the step size for regular sampling
step_size <- floor(dim / n)
# Generate a sequence of indices to select from the vector
indices <- seq(1, dim, by = step_size)
# Ensure we only select `n` indices
indices <- indices[1:n]
} else if (sampling_type == "random") {
# Randomly sample `n` indices from the vector
indices <- sample(1:dim, n)
}
return(indices)
}
get_subsample_indices(dim=sum(antsImageRead(mask)>0),
sampling_type=subsample.type,
factor=subsample)
factor=subsample
factor
if (!is.numeric(factor) && factor>0 && factor<=1) {
stop("Error: factor (or subsample) must be numeric between (0, 1]")
}
if (!sampling_type %in% c("random", "regular")) {
stop("Sampling type must be either 'random' or 'regular'.")
}
sampling_type=subsample.type
# Calculate the number of elements to sample
n <- ceiling(dim * factor)
dim
len
#' @export
get_subsample_indices <- function(len, sampling_type, factor) {
if (!is.numeric(factor) && factor>0 && factor<=1) {
stop("Error: factor (or subsample) must be numeric between (0, 1]")
}
if (!sampling_type %in% c("random", "regular")) {
stop("Sampling type must be either 'random' or 'regular'.")
}
# Calculate the number of elements to sample
n <- ceiling(len * factor)
cat(paste0('Subsampling by a factor of ', factor, '(', n,'vxl)',
', with strategy: ', sampling_type,))
if (sampling_type == "regular") {
# Calculate the step size for regular sampling
step_size <- floor(dim / n)
# Generate a sequence of indices to select from the vector
indices <- seq(1, dim, by = step_size)
# Ensure we only select `n` indices
indices <- indices[1:n]
} else if (sampling_type == "random") {
# Randomly sample `n` indices from the vector
indices <- sample(1:dim, n)
}
return(indices)
}
get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
len=sum(antsImageRead(mask)>0)
len
# Calculate the number of elements to sample
n <- ceiling(len * factor)
n
cat(paste0('Subsampling by a factor of ', factor, '(', n,'vxl)',
', with strategy: ', sampling_type,))
cat(paste0('Subsampling by a factor of ', factor, '(', n,'vxl)',
', with strategy: ', sampling_type))
cat(paste0('Subsampling by a factor of ', factor, ' (', n,'/', len,' vxl)',
', with strategy: ', sampling_type))
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
options(parallelly.localhost.hostname = "127.0.0.1")
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ x"
# test cv
dfcv <- rbinom(258, 1, 0.5)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
options(future.globals.maxSize=2000*1024^2)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
subsample = 0.5
subsample.type='regular'
get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
a =get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
type(a)
class(a)
is.numeric(a)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
# Prepare storage for results
results <- list()
results[[1]] <- 111
# Prepare storage for results
results
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
options(parallelly.localhost.hostname = "127.0.0.1")
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ x"
# test cv
dfcv <- rbinom(258, 1, 0.5)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
options(future.globals.maxSize=2000*1024^2)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
g.formula=fm1
g.family=NO
train.data=covs
fold.var = dfcv
n_folds = 3
k.penalty=4
subsample = 0.5
subsample.type='regular'
verbose=T
# Create stratified folds
train.data$folds <- stratCVfolds(fold.var, k = n_folds)
# subsample?
if (! is.null(subsample)){
subsample <- get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
} else
# Prepare storage for results
results <- list()
fold1
fold=1
cat(paste0("Processing fold ", fold, " of ", n_folds, "\n"), fill=T)
# Split data into training and validation sets
training_fold = train.data$folds == fold
test_indices <- which(train.data$folds == fold)
test_fold_data <- train.data[test_indices, ]
cat('-Fitting fold', fill=T)
# Fit the model on the training fold
model <- quite(vbgamlss_chunks(image,
mask,
g.formula,
train.data,
g.family,
segmentation,
num_cores,
chunk_max_mb=128,
afold=training_fold,
subsample=subsample),
skip=verbose)
num_cores=5
# Fit the model on the training fold
model <- quite(vbgamlss_chunks(image,
mask,
g.formula,
train.data,
g.family,
segmentation,
num_cores,
chunk_max_mb=128,
afold=training_fold,
subsample=subsample),
skip=verbose)
segmentation=NULL
# Fit the model on the training fold
model <- quite(vbgamlss_chunks(image,
mask,
g.formula,
train.data,
g.family,
segmentation,
num_cores,
chunk_max_mb=128,
afold=training_fold,
subsample=subsample),
skip=verbose)
# predict new fold
cat('-Estimating GD', fill=T)
# options(future.globals.maxSize=2000*1024^2) # 2000mb limit may be needed
GDs <- predictGD(model, newdata = test_fold_data, verbose=verbose)
# get statistics for validation Global Deviance
cat('-Summarizing statistics', fill=T)
stat = statGD(GDs,
k.penalty,
deg.fre=model[[1]]$df,
return_all_GD=return_all_GD)
return_all_GD=T
stat = statGD(GDs,
k.penalty,
deg.fre=model[[1]]$df,
return_all_GD=return_all_GD)
# Store the model and validation set
results[[fold]] <- stat
# Prepare storage for results
results <- list()
# Store the model and validation set
results[[fold]] <- stat
# Prepare storage for results
results <- c()
# Store the model and validation set
results[[fold]] <- stat
results
# Prepare storage for results
results <- c()
gc()
# Store the model and validation set
results[[fold]] <- stat
# Prepare storage for results
cvresults <- c()
# Store the model and validation set
cvresults[[fold]] <- stat
# clean
rm(model)
rm(GDs)
gc()
if (missing(image)) { stop("image is missing") }
if (missing(mask)) { stop("mask is missing") }
if (missing(g.formula)) { stop("formula is missing") }
if (missing(train.data)) { stop("subjData is missing") }
if (missing(fold.var)) { stop("variable to use in the stratified CV is missing") }
if (class(g.formula) != "character") { stop("g.formula class must be character") }
if (is.null(num_cores)) { num_cores <- availableCores() }
# Create stratified folds
train.data$folds <- stratCVfolds(fold.var, k = n_folds)
# subsample?
if (! is.null(subsample)){
subsample <- get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
} else
# Prepare storage for results
cvresults <- c()
if (missing(image)) { stop("image is missing") }
if (missing(mask)) { stop("mask is missing") }
if (missing(g.formula)) { stop("formula is missing") }
if (missing(train.data)) { stop("subjData is missing") }
if (missing(fold.var)) { stop("variable to use in the stratified CV is missing") }
if (class(g.formula) != "character") { stop("g.formula class must be character") }
if (is.null(num_cores)) { num_cores <- availableCores() }
# Create stratified folds
train.data$folds <- stratCVfolds(fold.var, k = n_folds)
# subsample?
if (! is.null(subsample)){
subsample <- get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
} else
# Prepare storage for results
cvresults <- c()
if (missing(image)) { stop("image is missing") }
if (missing(mask)) { stop("mask is missing") }
if (missing(g.formula)) { stop("formula is missing") }
if (missing(train.data)) { stop("subjData is missing") }
if (missing(fold.var)) { stop("variable to use in the stratified CV is missing") }
if (class(g.formula) != "character") { stop("g.formula class must be character") }
if (is.null(num_cores)) { num_cores <- availableCores() }
# Create stratified folds
train.data$folds <- stratCVfolds(fold.var, k = n_folds)
# subsample?
if (! is.null(subsample)){
subsample <- get_subsample_indices(sum(antsImageRead(mask)>0),
subsample.type,
subsample)
} else
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
models <- vbgamlss_chunks(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Core.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Support.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Utilities.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Mapping.R')
library(gamlss)
library(gamlss2)
library(ANTsR)
library(itertools)
library(progressr)
library(pbmcapply)
library(doFuture)
library(splitTools)
options(parallelly.localhost.hostname = "127.0.0.1")
### test ### https://cran.r-project.org/web/packages/voxel/voxel.pdf
image <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/funneled_mod.nii.gz'
mask <- '/home/localadmin/PycharmProjects/NormativeModellingPsychosis/gamlss/tests/vol.0_mask.nii.gz'
set.seed(1)
nsubj <- 258
covs <- data.frame(x = 1:258, x1 = rnorm(nsubj)*runif(nsubj), x2 = rnorm(nsubj))
covs2 <- data.frame(x = rnorm(nsubj), x1 = rnorm(nsubj)*rnorm(nsubj), x2 = rnorm(nsubj))
fm1 <- "Y ~ x"
# test cv
dfcv <- rbinom(258, 1, 0.5)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
options(future.globals.maxSize=2000*1024^2)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 3,
k.penalty=4,
subsample = 0.5,
subsample.type='regular',
verbose=T)
out
out
getCVGD <- function(cvresults) {
CVGD = 0
for (fold in cvresults) {CVGD <- CVGD + fold$GD}
return(CVGD)
}
getCVGDpen <- function(cvresults) {
CVGD = 0
for (fold in cvresults) {CVGD <- CVGD + fold$GDpen}
return(CVGD)
}
getCVGD(out)
for (fold in cvresults) {CVGD <- CVGD + fold$GD$mean}
getCVGD <- function(cvresults) {
CVGD = 0
for (fold in cvresults) {CVGD <- CVGD + fold$GD$mean}
return(CVGD)
}
getCVGD(out)
out[[1]]
out[[1]]$GDpen
out[[1]]$GDpen$mean
out[[1]]$GDpen[['mean']]
getCVGD <- function(cvresults) {
CVGD = 0
for (fold in cvresults) {CVGD <- CVGD + fold$GD[['mean']]}
return(CVGD)
}
getCVGDpen <- function(cvresults) {
CVGD = 0
for (fold in cvresults) {CVGD <- CVGD + fold$GDpen[['mean']]}
return(CVGD)
}
getCVGD(out)
getCVGDpen(out)
source('~/PycharmProjects/NormativeModellingPsychosis/gamlss/VBGAMLSS/R/Cross_validation.R')
options(future.globals.maxSize=2000*1024^2)
out <- vbgamlss.cv(image=image,
mask=mask,
g.formula=fm1,
g.family=NO,
train.data=covs,
fold.var = dfcv,
n_folds = 10,
k.penalty = 2.7,
subsample = 0.5,
subsample.type='regular',
verbose=T)
out
